
package cruise_control
public

with UC;

data Bool_Type
  properties
    Source_Data_Size => 16 Bits;
end Bool_Type;

data Float_Type
  properties
    Source_Data_Size => 32 Bits;
end Float_Type;

thread Button_Panel
  features
    Engspd_Rpm: in event data port Float_Type {
      Queue_Size => 1 applies to Button_Panel;
      Queue_Processing_Protocol => FIFO applies to Button_Panel;
      };
    Activate: out event port;
    Cancel: out event port;
    Onnotoff: out data port Bool_Type;
    Incspeed: out event data port Bool_Type;
    Decspd: out data port Bool_Type;
  flows
    fpb: flow path Engspd_Rpm -> Incspeed;
end Button_Panel;

thread implementation Button_Panel.Gui
  calls
     one_calls:{
      subp1_1: subprogram subp1_1.impl;
      };
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Button_Panel_func";
    Source_Text => ("fButton_Panelcpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 1 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Button_Panel";
    Initialize_Execution_Time => 6 Ms .. 9 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_Button_Panel";
    Finalize_Execution_Time => 6 Ms .. 9 Ms;
end Button_Panel.Gui;

subprogram subp1_1
end subp1_1;

subprogram implementation subp1_1.impl
  calls
     one_calls:{
      subp1_2: subprogram subp1_2.impl;
      };
  properties
    Source_Text => ("subp1_1cpp");
end subp1_1.impl;

subprogram subp1_2
end subp1_2;

subprogram implementation subp1_2.impl
  properties
    Source_Text => ("subp1_2cpp");
end subp1_2.impl;

thread Drivermodelogic
  features
    Breakpedalpressed: requires data access Bool_Type;
    Clutchpedalpressed: in data port Bool_Type;
    Activate: in event port;
    Cancel: in event port;
    Onnotoff: in data port Bool_Type;
    Cruiseactive: out data port Bool_Type;
end Drivermodelogic;

thread implementation Drivermodelogic.Simulink
  calls
     one_calls:{
      llamado: subprogram subp2_1.impl;
      };
  connections
    in_valor: parameter Onnotoff -> llamado.in_parameter;
    referencia: data access Breakpedalpressed -> llamado.p1;
    out_valor: parameter llamado.out_parameter -> Cruiseactive;
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Drivermodelogic_func";
    Source_Text => ("fDrivermodelogiccpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 2 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Drivermodelogic";
    Initialize_Execution_Time => 5 Ms .. 8 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_Drivermodelogic";
    Finalize_Execution_Time => 5 Ms .. 8 Ms;
end Drivermodelogic.Simulink;

subprogram subp2_1
  features
    in_parameter: in parameter Bool_Type;
    p1: requires data access Bool_Type;
    out_parameter: out parameter Bool_Type;
end subp2_1;

subprogram implementation subp2_1.impl
  properties
    Source_Text => ("subp2_1cpp");
end subp2_1.impl;

thread Refspd
  features
    Activate: in event port;
    Cruiseactive: in data port Bool_Type;
    Incspeed: in event data port Bool_Type {
      Queue_Size => 1 applies to Refspd;
      Queue_Processing_Protocol => FIFO  applies to Refspd;
      };
    Decspd: in data port Bool_Type;
    Refspd_Mph: out event data port Float_Type;
  flows
    fpr: flow path Incspeed -> Refspd_Mph;
end Refspd;

thread implementation Refspd.Simulink
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Refspd_func";
    Source_Text => ("fRefspdcpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 3 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Refspd";
    Initialize_Execution_Time => 4 Ms .. 7 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_Refspd";
    Finalize_Execution_Time => 4 Ms .. 7 Ms;
end Refspd.Simulink;

thread Instrumentpanel
  features
    Autospd_Mph: in data port Float_Type;
    Refspd_Mph: in event data port Float_Type {
      Queue_Size => 200 applies to Instrumentpanel;
      Queue_Processing_Protocol => FIFO applies to Instrumentpanel;
      };
    call_server: requires subprogram access service_it.impl;
end Instrumentpanel;

thread implementation Instrumentpanel.Gui
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Instrumentpanel_func";
    Source_Text => ("fInstrumentpanelcpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 4 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Instrumentpanel";
    Initialize_Execution_Time => 3 Ms .. 6 Ms;

    Finalize_Entrypoint_Source_Text => "Finalize_Instrumentpanel";
    Finalize_Execution_Time => 3 Ms .. 6 Ms;
end Instrumentpanel.Gui;

process Hci_Process
  features
    Breakpedalpressed: requires data access Bool_Type;
    Clutchpedalpressed: in data port Bool_Type;
    Autospd_Mph: in data port Float_Type;
    Engspd_Rpm: in event data port Float_Type;
    Cruiseactive: out data port Bool_Type;
    Refspd_Mph: out event data port Float_Type;
  flows
    fppf: flow path Engspd_Rpm -> Refspd_Mph;
end Hci_Process;

process implementation Hci_Process.Model
  subcomponents
    Button_Panel: thread Button_Panel.Gui;
    Drivermodelogic: thread Drivermodelogic.Simulink;
    Refspd: thread Refspd.Simulink;
    Instrumentpanel: thread Instrumentpanel.Gui;
  connections
    CBreakpedalpressed: data access Breakpedalpressed -> Drivermodelogic.Breakpedalpressed;
    CClutchpedalpressed: port Clutchpedalpressed -> Drivermodelogic.Clutchpedalpressed;
    CAutospd_Mph: port Autospd_Mph -> Instrumentpanel.Autospd_Mph;
    CEngspd_Rpm: port Engspd_Rpm -> Button_Panel.Engspd_Rpm;
    CCruiseactive1: port Drivermodelogic.Cruiseactive -> Cruiseactive;
    Refspd1: port Refspd.Refspd_Mph -> Refspd_Mph;
    CCruiseactive2: port Drivermodelogic.Cruiseactive -> Refspd.Cruiseactive;
    CActivate1: port Button_Panel.Activate -> Drivermodelogic.Activate;
    CCancel: port Button_Panel.Cancel -> Drivermodelogic.Cancel;
    COnnotoff: port Button_Panel.Onnotoff -> Drivermodelogic.Onnotoff;
    CActivate2: port Button_Panel.Activate -> Refspd.Activate;
    
    CIncspeed: port Button_Panel.Incspeed -> Refspd.Incspeed;
    CDecspd: port Button_Panel.Decspd -> Refspd.Decspd;
    Refspd2: port Refspd.Refspd_Mph -> Instrumentpanel.Refspd_Mph;
  flows
    fppf: flow path Engspd_Rpm -> CEngspd_Rpm -> Button_Panel.fpb
       -> CIncspeed -> Refspd.fpr
       -> Refspd1 -> Refspd_Mph;
end Hci_Process.Model;

system Hci
  features
    Breakpedalpressed: requires data access Bool_Type;
    Clutchpedalpressed: in data port Bool_Type;
    Autospd_Mph: in data port Float_Type;
    Engspd_Rpm: in event data port Float_Type;
    Cruiseactive: out data port Bool_Type;
    Refspd_Mph: out event data port Float_Type;
  flows
    fpsf: flow path Engspd_Rpm -> Refspd_Mph;
end Hci;

system implementation Hci.Model
  subcomponents
    P_Hci_Process: process Hci_Process.Model;
    server_process: process server_process.impl;
  connections
    CBreakpedalpressed: data access Breakpedalpressed -> P_Hci_Process.Breakpedalpressed;
    CClutchpedalpressed: port Clutchpedalpressed -> P_Hci_Process.Clutchpedalpressed;
    CAutospd_Mph: port Autospd_Mph -> P_Hci_Process.Autospd_Mph;
    CEngspd_Rpm: port Engspd_Rpm -> P_Hci_Process.Engspd_Rpm;
    CCruiseactive: port P_Hci_Process.Cruiseactive -> Cruiseactive;
    Refspd1: port P_Hci_Process.Refspd_Mph -> Refspd_Mph;
  flows
    fpsf: flow path Engspd_Rpm -> CEngspd_Rpm -> P_Hci_Process.fppf
       -> Refspd1 -> Refspd_Mph;
  properties
    Actual_Subprogram_Call =>  reference (server_process.server_thread.service) applies to P_Hci_Process.Instrumentpanel.call_server;
end Hci.Model;

process server_process
  features
    service: provides subprogram access service_it;
end server_process;

process implementation server_process.impl
  subcomponents
    server_thread: thread server_thread.impl;
end server_process.impl;

thread server_thread
  features
    service: provides subprogram access service_it;
end server_thread;

thread implementation server_thread.impl
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "server_thread_func";
    Source_Text => ("fserver_threadcpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 4 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_server_thread";
    
    Initialize_Execution_Time => 3 Ms .. 6 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_server_thread";
    Finalize_Execution_Time => 3 Ms .. 6 Ms;
end server_thread.impl;

subprogram service_it
end service_it;

subprogram implementation service_it.impl
end service_it.impl;

thread Cruise1
  features
    Cruiseactive: in data port Bool_Type;
    Refspd_Mph: in event data port Float_Type {
      Queue_Size => 200 applies to Instrumentpanel;
      Queue_Processing_Protocol => FIFO applies to Instrumentpanel;
      };
    Autospd_Mph: in data port Float_Type;
    Filautospd_Mph: out event data port Float_Type;
    Filrefspd_Mph: out event data port Float_Type;
  flows
    fpc1: flow path Refspd_Mph -> Filrefspd_Mph;
end Cruise1;

thread implementation Cruise1.Simulink
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Cruise1_func";
    
    Source_Text => ("fCruise1cpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 5 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Cruise1";
    
    Initialize_Execution_Time => 2 Ms .. 5 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_Cruise1";
    
    Finalize_Execution_Time => 2 Ms .. 5 Ms;
end Cruise1.Simulink;

thread Cruise2
  features
    Filautospd_Mph: in event data port Float_Type {
      Queue_Size => 40 applies to Instrumentpanel;
      Queue_Processing_Protocol => FIFO applies to Instrumentpanel;
      };
    Filrefspd_Mph: in event data port Float_Type {
      Queue_Size => 50 applies to Instrumentpanel;
      Queue_Processing_Protocol => FIFO applies to Instrumentpanel;
      };
    Throttlepos_In: out event data port Float_Type;
    access1: requires data access class1.impl;
    access2: requires data access integer;
  flows
    fpc2: flow path Filrefspd_Mph -> Throttlepos_In;
end Cruise2;

thread implementation Cruise2.Simulink
  subcomponents
    address_1: data address.others;
  properties
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
    Compute_Entrypoint_Source_Text => "Cruise2_func";
    
    Source_Text => ("fCruise2cpp");
    UC::POSIX_Scheduling_Policy => SCHED_RR;
    UC::Priority => 20;
    Compute_Execution_Time => 6 Ms .. 10 Ms;
    Initialize_Entrypoint_Source_Text => "Initialize_Cruise2";
    
    Initialize_Execution_Time => 1 Ms .. 4 Ms;
    Finalize_Entrypoint_Source_Text => "Finalize_Cruise2";
    
    Finalize_Execution_Time => 1 Ms .. 4 Ms;
end Cruise2.Simulink;

process Cruisecontrol_Process
  features
    Cruiseactive: in data port Bool_Type;
    Refspd_Mph: in event data port Float_Type;
    Autospd_Mph: in data port Float_Type;
    Throttlepos_In: out event data port Float_Type;
  flows
    fppb: flow path Refspd_Mph -> Throttlepos_In;
end Cruisecontrol_Process;

process implementation Cruisecontrol_Process.Model
  subcomponents
    Cruise1: thread Cruise1.Simulink;
    Cruise2: thread Cruise2.Simulink;
    class1: data class1.impl;
    number1: data integer;
  connections
    CCruiseactive1: port Cruiseactive -> Cruise1.Cruiseactive;
    Refspd1: port Refspd_Mph -> Cruise1.Refspd_Mph;
    CAutospd_Mph: port Autospd_Mph -> Cruise1.Autospd_Mph;
    CThrottlepos_In: port Cruise2.Throttlepos_In -> Throttlepos_In;
    Filautospd: port Cruise1.Filautospd_Mph -> Cruise2.Filautospd_Mph;
    Filrefspd: port Cruise1.Filrefspd_Mph -> Cruise2.Filrefspd_Mph;
    C1: data access class1 -> Cruise2.access1;
    C2: data access number1 -> Cruise2.access2;
  flows
    fppb: flow path Refspd_Mph -> Refspd1 -> Cruise1.fpc1
       -> Filrefspd -> Cruise2.fpc2
       -> CThrottlepos_In -> Throttlepos_In;
end Cruisecontrol_Process.Model;

data integer
end integer;

data character
end character;

data string
end string;

data float
end float;

data class1
  features
    method: provides subprogram access subp3.impl;
end class1;

data implementation class1.impl
  subcomponents
    member1: data integer;
    member2: data character;
end class1.impl;

subprogram subp3
  features
    input: in parameter string;
    output: out parameter float;
end subp3;

subprogram implementation subp3.impl
  properties
    Source_Text => ("subp3cpp");
end subp3.impl;

data address
  features
    method1: provides subprogram access subp4_1;
    method2: provides subprogram access subp4_2;
end address;

data implementation address.others
  subcomponents
    street: data string;
    streetnumber: data integer;
    city: data string;
    zipcode: data integer;
end address.others;

subprogram subp4_1
  features
    tipo: in parameter character;
    this: requires data access address;
    total: out parameter integer;
end subp4_1;

subprogram implementation subp4_1.impl
  properties
    Source_Text => ("subp4_1cpp");
end subp4_1.impl;

subprogram subp4_2
  features
    this: requires data access address;
end subp4_2;

subprogram implementation subp4_2.impl
  properties
    Source_Text => ("subp4_2cpp");
end subp4_2.impl;

system Cruisecontrollaws
  features
    Cruiseactive: in data port Bool_Type;
    Refspd_Mph: in event data port Float_Type;
    Autospd_Mph: in data port Float_Type;
    Throttlepos_In: out event data port Float_Type;
  flows
    fpsb: flow path Refspd_Mph -> Throttlepos_In;
end Cruisecontrollaws;

system implementation Cruisecontrollaws.Model
  subcomponents
    P_Cruisecontrol_Process: process Cruisecontrol_Process.Model;
  connections
    CCruiseactive: port Cruiseactive -> P_Cruisecontrol_Process.Cruiseactive;
    Refspd1: port Refspd_Mph -> P_Cruisecontrol_Process.Refspd_Mph;
    CAutospd_Mph: port Autospd_Mph -> P_Cruisecontrol_Process.Autospd_Mph;
    CThrottlepos_In: port P_Cruisecontrol_Process.Throttlepos_In -> Throttlepos_In;
  flows
    fpsb: flow path Refspd_Mph -> Refspd1 -> P_Cruisecontrol_Process.fppb
       -> CThrottlepos_In -> Throttlepos_In;
end Cruisecontrollaws.Model;

bus Lan_Type
  properties
    Transmission_Time => (Fixed => 0 Ns..10 Ns;);
end Lan_Type;

bus implementation Lan_Type.i
end Lan_Type.i;

processor arm926t
  features
    B_Lan: requires bus access Lan_Type;
  properties
    Assign_Time => (Fixed => 0 Ns..8 Ns;);
    Source_Code_Size => 16 KByte;
    Source_Data_Size => 3000 Bytes;
    Source_Stack_Size => 1 KByte;
end arm926t;

processor implementation arm926t.impl
end arm926t.impl;

memory Memory_Card
  features
    Card_Connector: requires bus access Lan_Type;
  properties
    Byte_Count => 134217728;
    Word_Size => 4 Bytes;
    Memory_Protocol => read_write;
    Read_Time  => (Fixed => 10 Ns .. 15 Ns;);
    Write_Time => (Fixed => 10 Ns .. 30 Ns;);
end Memory_Card;

memory implementation Memory_Card.impl
end Memory_Card.impl;

device Engspd_sensor
  features
    Engspd_Rpm: out event data port Float_Type;
    bus_access: requires bus access Lan_Type;
  flows
    sensor: flow source Engspd_Rpm;
  properties
    Source_Code_Size => 10 KByte;
    Source_Data_Size => 2000 Bytes;
    Source_Stack_Size => 1 KByte;
    Source_Text => ("engspd_sensorcpp");
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
end Engspd_sensor;

device implementation Engspd_sensor.impl
end Engspd_sensor.impl;

device Throttlepos
  features
    Throttlepos_In: in event data port Float_Type {
      Queue_Size => 1 applies to Instrumentpanel ;
      Queue_Processing_Protocol => FIFO applies to Instrumentpanel;
      };
    bus_access: requires bus access Lan_Type;
  flows
    throttlepos: flow sink Throttlepos_In;
  properties
    Source_Code_Size => 10 KByte;
    Source_Data_Size => 2000 Bytes;
    Source_Stack_Size => 1 KByte;
    Source_Text => ("throttleposcpp");
    Dispatch_Protocol => Periodic;
    Period => 20 Ms;
end Throttlepos;

device implementation Throttlepos.impl
end Throttlepos.impl;

system Cruisecontrol
  features
    Breakpedalpressed: requires data access Bool_Type;
    Clutchpedalpressed: in data port Bool_Type;
    Autospd_Mph: in data port Float_Type;
end Cruisecontrol;

system implementation Cruisecontrol.Generic
  subcomponents
    Lan: bus Lan_Type.i;
    S_Hci: system Hci.Model;
    S_Cruisecontrollaws: system Cruisecontrollaws.Model;
    Hci_Processor: processor arm926t.impl;
    Ccl_Processor: processor arm926t.impl;
    Hci_Memory: memory Memory_Card.impl {
      Base_Address => 80000000;
      };
    Ccl_Memory: memory Memory_Card.impl {
      Base_Address => 20000000;
      };
    Hci_Engspd_sensor: device Engspd_sensor.impl{
      Base_Address => 90000000;
      };
    Ccl_Throttlepos: device Throttlepos.impl{
      Base_Address => 30000000;
      };
  connections
    CBreakpedalpressed: data access Breakpedalpressed -> S_Hci.Breakpedalpressed;
    CClutchpedalpressed: port Clutchpedalpressed -> S_Hci.Clutchpedalpressed;
    CAutospd_Mph1: port Autospd_Mph -> S_Hci.Autospd_Mph;
    CEngspd_Rpm: port Hci_Engspd_sensor.Engspd_Rpm -> S_Hci.Engspd_Rpm;
    CAutospd_Mph2: port Autospd_Mph -> S_Cruisecontrollaws.Autospd_Mph;
    CThrottlepos: port S_Cruisecontrollaws.Throttlepos_In -> Ccl_Throttlepos.Throttlepos_In;
    CCruiseactive: port S_Hci.Cruiseactive -> S_Cruisecontrollaws.Cruiseactive {
      Allowed_Connection_Binding =>  (reference (lan));
      };
    Refspd1: port S_Hci.Refspd_Mph -> S_Cruisecontrollaws.Refspd_Mph {
      Allowed_Connection_Binding =>  (reference (lan));
      };
     HciProcessorbus   : bus access Lan -> Hci_Processor.B_Lan;
     CclProcessorbus   : bus access Lan -> Ccl_Processor.B_Lan;
     HciMemorybus      : bus access Lan -> Hci_Memory.Card_Connector;
     CclMemorybus      : bus access Lan -> CclMemory._Card_Connector;
     HciEngspdbus      : bus access Lan -> Hci_Engspd_sensor.bus_access;
     CclThrottleposbus : bus access Lan -> Ccl_Throttlepos.bus_access;
  
  flows
    system_flow: end to end flow Hci_Engspd_sensor.sensor -> CEngspd_Rpm -> S_Hci.fpsf
       -> Refspd1 -> S_Cruisecontrollaws.fpsb
       -> CThrottlepos -> Ccl_Throttlepos.throttlepos
       {
        Latency => 0Ms..140 Ms;
        };

  properties
    Allowed_Processor_Binding =>  (reference (hci_processor)) applies to S_Hci;
    Allowed_Processor_Binding =>  (reference (ccl_processor)) applies to S_Cruisecontrollaws;
    Actual_Processor_Binding =>  (reference (ccl_processor)) applies to S_Cruisecontrollaws.P_Cruisecontrol_Process.Cruise2;
    Allowed_Memory_Binding =>  (reference (hci_memory)) applies to S_Hci;
    Allowed_Memory_Binding =>  (reference (ccl_memory)) applies to S_Cruisecontrollaws;
end Cruisecontrol.Generic;
end cruise_control;
